{"ast":null,"code":"import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/***\n * Created by Srvraj311 (Sourabh)\n * sourabhraj311@gmail.com\n *\n * This service stores the Matrix of Seats and provides them to components when needed,\n * Two methods to update the matrix and booked seats so that all receiving components will update in realtime\n */\n\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this._url = \"http://localhost:3000\";\n      this.mat = new BehaviorSubject([]);\n      this.bookedSeat = new BehaviorSubject([]);\n      this.availableSeats = new BehaviorSubject(0);\n      this.getMat = this.mat.asObservable();\n      this.getBookedSeat = this.bookedSeat.asObservable();\n      this.getAvailableSeat = this.availableSeats.asObservable();\n    }\n\n    changeMat(mat) {\n      this.mat.next(mat);\n      this.coach.bookingState = this.convertMatrixToBinary(mat);\n    }\n\n    updateBookedSeat(seat) {\n      this.bookedSeat.next(seat);\n    }\n\n    updateAvailableSeats(n) {\n      if (n == 0 || n) this.availableSeats.next(n);else {\n        this.availableSeats.next(this.coach.availableSeats);\n      }\n      this.coach.availableSeats = this.availableSeats.value;\n    }\n\n    getTrains() {\n      const url = `${this._url}/trains`;\n      return this.http.get(url);\n    }\n\n    getCoaches(train_no) {\n      const url = `${this._url}/coach/${train_no}`;\n      return this.http.get(url);\n    }\n\n    setCoach(coach) {\n      this.coach = coach;\n      this.updateAvailableSeats(this.coach.availableSeats);\n      this.updateBookedSeat([]);\n      if (coach.bookingState.length <= 1) this.resetMatrix().subscribe(res => {\n        this.changeMat(this.convertBinaryToMatrix(res.coach));\n      });else this.mat.next(this.convertBinaryToMatrix(coach.bookingState));\n    }\n\n    resetMatrix() {\n      const cid = this.coach.coach_id;\n      const url = `${this._url}/booking/clear/${cid}`;\n      return this.http.get(url);\n    }\n\n    generateRandom() {\n      const cid = this.coach.coach_id;\n      const url = `${this._url}/booking/random/${cid}`;\n      return this.http.get(url);\n    }\n\n    convertBinaryToMatrix(mat) {\n      let outMat = [];\n      let count = 1;\n\n      for (let i = 0; i < mat.length; i++) {\n        const row = [];\n\n        for (let j = 0; j < mat[i].length; j++) {\n          const seat = {\n            id: count++,\n            number: count,\n            booked: mat[i][j] === 1\n          };\n          row.push(seat);\n        }\n\n        outMat.push(row);\n      }\n\n      return outMat;\n    }\n\n    convertMatrixToBinary(mat) {\n      let outMat = [];\n\n      for (let i = 0; i < mat.length; i++) {\n        const row = [];\n\n        for (let j = 0; j < mat[i].length; j++) {\n          if (mat[i][j].booked) row.push(1);else row.push(0);\n        }\n\n        outMat.push(row);\n      }\n\n      return outMat;\n    }\n\n    makeBookRequest(n) {\n      const cid = this.coach.coach_id;\n      const url = `${this._url}/booking/${cid}/${n}`;\n      return this.http.get(url);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}